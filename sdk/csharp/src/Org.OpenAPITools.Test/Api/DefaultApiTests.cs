/*
 * BV-BRC API
 *
 * API documentation for BV-BRC
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    public sealed class DefaultApiTests : ApiTestsBase
    {
        private readonly IDefaultApi _instance;

        public DefaultApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IDefaultApi>();
        }

        /// <summary>
        /// Test AcceptGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AcceptGetAsyncTest()
        {
            await _instance.AcceptGetAsync();
        }

        /// <summary>
        /// Test ApiGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ApiGetAsyncTest()
        {
            await _instance.ApiGetAsync();
        }

        /// <summary>
        /// Test CollectionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CollectionGetAsyncTest()
        {
            await _instance.CollectionGetAsync();
        }

        /// <summary>
        /// Test ContentDirectoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContentDirectoryGetAsyncTest()
        {
            await _instance.ContentDirectoryGetAsync();
        }

        /// <summary>
        /// Test ContentIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContentIdGetAsyncTest()
        {
            string id = default!;
            await _instance.ContentIdGetAsync(id);
        }

        /// <summary>
        /// Test ContentTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ContentTypeGetAsyncTest()
        {
            await _instance.ContentTypeGetAsync();
        }

        /// <summary>
        /// Test DataPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DataPostAsyncTest()
        {
            DataPostRequest dataPostRequest = default!;
            await _instance.DataPostAsync(dataPostRequest);
        }

        /// <summary>
        /// Test DataTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DataTypeGetAsyncTest()
        {
            var response = await _instance.DataTypeGetAsync();
            var model = response.Ok();
            Assert.IsType<List<string>>(model);
        }

        /// <summary>
        /// Test DistinctCollectionFieldGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DistinctCollectionFieldGetAsyncTest()
        {
            await _instance.DistinctCollectionFieldGetAsync();
        }

        /// <summary>
        /// Test DistributeURLGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DistributeURLGetAsyncTest()
        {
            await _instance.DistributeURLGetAsync();
        }

        /// <summary>
        /// Test DocGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DocGetAsyncTest()
        {
            await _instance.DocGetAsync();
        }

        /// <summary>
        /// Test DownloadGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DownloadGetAsyncTest()
        {
            string fileId = default!;
            await _instance.DownloadGetAsync(fileId);
        }

        /// <summary>
        /// Test ExperimentGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExperimentGetAsyncTest()
        {
            await _instance.ExperimentGetAsync();
        }

        /// <summary>
        /// Test ExperimentIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExperimentIdGetAsyncTest()
        {
            await _instance.ExperimentIdGetAsync();
        }

        /// <summary>
        /// Test ExperimentIdIdListIdListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExperimentIdIdListIdListGetAsyncTest()
        {
            await _instance.ExperimentIdIdListIdListGetAsync();
        }

        /// <summary>
        /// Test ExperimentIdIdListIdListIdsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExperimentIdIdListIdListIdsGetAsyncTest()
        {
            await _instance.ExperimentIdIdListIdListIdsGetAsync();
        }

        /// <summary>
        /// Test FeatureTypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task FeatureTypeGetAsyncTest()
        {
            await _instance.FeatureTypeGetAsync();
        }

        /// <summary>
        /// Test Genome2697049107626TrackListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task Genome2697049107626TrackListGetAsyncTest()
        {
            await _instance.Genome2697049107626TrackListGetAsync();
        }

        /// <summary>
        /// Test GenomeIdFeaturesSeqAccessionGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdFeaturesSeqAccessionGetAsyncTest()
        {
            await _instance.GenomeIdFeaturesSeqAccessionGetAsync();
        }

        /// <summary>
        /// Test GenomeIdNamesGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdNamesGetAsyncTest()
        {
            await _instance.GenomeIdNamesGetAsync();
        }

        /// <summary>
        /// Test GenomeIdRefseqsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdRefseqsGetAsyncTest()
        {
            await _instance.GenomeIdRefseqsGetAsync();
        }

        /// <summary>
        /// Test GenomeIdStatsGlobalGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdStatsGlobalGetAsyncTest()
        {
            await _instance.GenomeIdStatsGlobalGetAsync();
        }

        /// <summary>
        /// Test GenomeIdStatsRegionFeatureDensitiesSequenceIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdStatsRegionFeatureDensitiesSequenceIdGetAsyncTest()
        {
            await _instance.GenomeIdStatsRegionFeatureDensitiesSequenceIdGetAsync();
        }

        /// <summary>
        /// Test GenomeIdStatsRegionSequenceIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdStatsRegionSequenceIdGetAsyncTest()
        {
            await _instance.GenomeIdStatsRegionSequenceIdGetAsync();
        }

        /// <summary>
        /// Test GenomeIdTrackListGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdTrackListGetAsyncTest()
        {
            await _instance.GenomeIdTrackListGetAsync();
        }

        /// <summary>
        /// Test GenomeIdTracksGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenomeIdTracksGetAsyncTest()
        {
            await _instance.GenomeIdTracksGetAsync();
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAsyncTest()
        {
            await _instance.GetAsync();
        }

        /// <summary>
        /// Test HpiSearchGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HpiSearchGetAsyncTest()
        {
            Client.Option<string> term = default!;
            var response = await _instance.HpiSearchGetAsync(term);
            var model = response.Ok();
            Assert.IsType<HpiSearchGet200Response>(model);
        }

        /// <summary>
        /// Test HttpPortGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HttpPortGetAsyncTest()
        {
            await _instance.HttpPortGetAsync();
        }

        /// <summary>
        /// Test IdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IdGetAsyncTest()
        {
            await _instance.IdGetAsync();
        }

        /// <summary>
        /// Test IndexerPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task IndexerPostAsyncTest()
        {
            await _instance.IndexerPostAsync();
        }

        /// <summary>
        /// Test JbrowseAPIRootGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task JbrowseAPIRootGetAsyncTest()
        {
            await _instance.JbrowseAPIRootGetAsync();
        }

        /// <summary>
        /// Test JbrowseGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task JbrowseGetAsyncTest()
        {
            string genomeId = default!;
            await _instance.JbrowseGetAsync(genomeId);
        }

        /// <summary>
        /// Test PermissionsGenomeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PermissionsGenomeGetAsyncTest()
        {
            string genomeId = default!;
            await _instance.PermissionsGenomeGetAsync(genomeId);
        }

        /// <summary>
        /// Test Post
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostAsyncTest()
        {
            await _instance.PostAsync();
        }

        /// <summary>
        /// Test PublicURLGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PublicURLGetAsyncTest()
        {
            await _instance.PublicURLGetAsync();
        }

        /// <summary>
        /// Test QueryMultiPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueryMultiPostAsyncTest()
        {
            QueryMultiPostRequest queryMultiPostRequest = default!;
            await _instance.QueryMultiPostAsync(queryMultiPostRequest);
        }

        /// <summary>
        /// Test QueueDirectoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task QueueDirectoryGetAsyncTest()
        {
            await _instance.QueueDirectoryGetAsync();
        }

        /// <summary>
        /// Test RedisGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RedisGetAsyncTest()
        {
            await _instance.RedisGetAsync();
        }

        /// <summary>
        /// Test RootGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RootGetAsyncTest()
        {
            await _instance.RootGetAsync();
        }

        /// <summary>
        /// Test RootPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RootPostAsyncTest()
        {
            await _instance.RootPostAsync();
        }

        /// <summary>
        /// Test RpcPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task RpcPostAsyncTest()
        {
            RpcPostRequest rpcPostRequest = default!;
            await _instance.RpcPostAsync(rpcPostRequest);
        }

        /// <summary>
        /// Test SolrGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SolrGetAsyncTest()
        {
            await _instance.SolrGetAsync();
        }

        /// <summary>
        /// Test SubsystemSummaryGenomeIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SubsystemSummaryGenomeIdGetAsyncTest()
        {
            await _instance.SubsystemSummaryGenomeIdGetAsync();
        }

        /// <summary>
        /// Test SummaryByTaxonTaxonIdGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SummaryByTaxonTaxonIdGetAsyncTest()
        {
            await _instance.SummaryByTaxonTaxonIdGetAsync();
        }

        /// <summary>
        /// Test TargetIdPatch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TargetIdPatchAsyncTest()
        {
            await _instance.TargetIdPatchAsync();
        }

        /// <summary>
        /// Test TargetIdPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TargetIdPostAsyncTest()
        {
            await _instance.TargetIdPostAsync();
        }

        /// <summary>
        /// Test TaxonCategoryGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TaxonCategoryGetAsyncTest()
        {
            await _instance.TaxonCategoryGetAsync();
        }

        /// <summary>
        /// Test TypeGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TypeGetAsyncTest()
        {
            await _instance.TypeGetAsync();
        }

        /// <summary>
        /// Test TypePost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task TypePostAsyncTest()
        {
            await _instance.TypePostAsync();
        }
    }
}
