/*
 * BV-BRC API
 * API documentation for BV-BRC
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataPostRequest;
import org.openapitools.client.model.HpiSearchGet200Response;
import org.openapitools.client.model.QueryMultiPostRequest;
import org.openapitools.client.model.RpcPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Auto-generated summary for GET accept
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptGetTest() throws ApiException {
        api.acceptGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /api
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiGetTest() throws ApiException {
        api.apiGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /:collection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void collectionGetTest() throws ApiException {
        api.collectionGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET contentDirectory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentDirectoryGetTest() throws ApiException {
        api.contentDirectoryGet();
        // TODO: test validations
    }

    /**
     * Retrieve content by ID
     *
     * Fetches content details based on a given ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentIdGetTest() throws ApiException {
        String id = null;
        api.contentIdGet(id);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET content-type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contentTypeGetTest() throws ApiException {
        api.contentTypeGet();
        // TODO: test validations
    }

    /**
     * Add a new dataset entry
     *
     * Creates a new dataset entry in the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataPostTest() throws ApiException {
        DataPostRequest dataPostRequest = null;
        api.dataPost(dataPostRequest);
        // TODO: test validations
    }

    /**
     * Retrieve available data types
     *
     * Returns a list of all data types available in the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataTypeGetTest() throws ApiException {
        List<String> response = api.dataTypeGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /distinct/:collection/:field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distinctCollectionFieldGetTest() throws ApiException {
        api.distinctCollectionFieldGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET distributeURL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void distributeURLGetTest() throws ApiException {
        api.distributeURLGet();
        // TODO: test validations
    }

    /**
     * Retrieve API documentation
     *
     * Serves API documentation in JSON format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void docGetTest() throws ApiException {
        api.docGet();
        // TODO: test validations
    }

    /**
     * Download a file
     *
     * Allows downloading files from the API using a file ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadGetTest() throws ApiException {
        String fileId = null;
        api.downloadGet(fileId);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /experiment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void experimentGetTest() throws ApiException {
        api.experimentGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /experiment/:id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void experimentIdGetTest() throws ApiException {
        api.experimentIdGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /experiment/:id/id-list/:id_list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void experimentIdIdListIdListGetTest() throws ApiException {
        api.experimentIdIdListIdListGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /experiment/:id/id-list/:id_list/ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void experimentIdIdListIdListIdsGetTest() throws ApiException {
        api.experimentIdIdListIdListIdsGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET feature_type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void featureTypeGetTest() throws ApiException {
        api.featureTypeGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/2697049.107626/trackList
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genome2697049107626TrackListGetTest() throws ApiException {
        api.genome2697049107626TrackListGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/features/:seq_accession
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdFeaturesSeqAccessionGetTest() throws ApiException {
        api.genomeIdFeaturesSeqAccessionGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/names/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdNamesGetTest() throws ApiException {
        api.genomeIdNamesGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/refseqs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdRefseqsGetTest() throws ApiException {
        api.genomeIdRefseqsGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/stats/global
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdStatsGlobalGetTest() throws ApiException {
        api.genomeIdStatsGlobalGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/stats/regionFeatureDensities/:sequence_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdStatsRegionFeatureDensitiesSequenceIdGetTest() throws ApiException {
        api.genomeIdStatsRegionFeatureDensitiesSequenceIdGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/stats/region/:sequence_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdStatsRegionSequenceIdGetTest() throws ApiException {
        api.genomeIdStatsRegionSequenceIdGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/trackList
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdTrackListGetTest() throws ApiException {
        api.genomeIdTrackListGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /genome/:id/tracks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void genomeIdTracksGetTest() throws ApiException {
        api.genomeIdTracksGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        api.get();
        // TODO: test validations
    }

    /**
     * Search HPI data
     *
     * Fetches data from the HPI search API using a search term.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hpiSearchGetTest() throws ApiException {
        String term = null;
        HpiSearchGet200Response response = api.hpiSearchGet(term);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET http_port
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void httpPortGetTest() throws ApiException {
        api.httpPortGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /:id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void idGetTest() throws ApiException {
        api.idGet();
        // TODO: test validations
    }

    /**
     * Trigger data indexing
     *
     * Initiates the indexing process for the API database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void indexerPostTest() throws ApiException {
        api.indexerPost();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET jbrowseAPIRoot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jbrowseAPIRootGetTest() throws ApiException {
        api.jbrowseAPIRootGet();
        // TODO: test validations
    }

    /**
     * Retrieve JBrowse data
     *
     * Fetches genomic visualization data for JBrowse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jbrowseGetTest() throws ApiException {
        String genomeId = null;
        api.jbrowseGet(genomeId);
        // TODO: test validations
    }

    /**
     * Check genome permissions
     *
     * Returns access permissions for a given genome.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsGenomeGetTest() throws ApiException {
        String genomeId = null;
        api.permissionsGenomeGet(genomeId);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for POST *
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTest() throws ApiException {
        api.post();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET publicURL
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publicURLGetTest() throws ApiException {
        api.publicURLGet();
        // TODO: test validations
    }

    /**
     * Execute multiple queries
     *
     * Submits multiple queries to the API and returns combined results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMultiPostTest() throws ApiException {
        QueryMultiPostRequest queryMultiPostRequest = null;
        api.queryMultiPost(queryMultiPostRequest);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET queueDirectory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queueDirectoryGetTest() throws ApiException {
        api.queueDirectoryGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET redis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisGetTest() throws ApiException {
        api.redisGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /
     *
     * Returns general information about the API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rootGetTest() throws ApiException {
        api.rootGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for POST /
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rootPostTest() throws ApiException {
        api.rootPost();
        // TODO: test validations
    }

    /**
     * Execute an RPC request
     *
     * Handles remote procedure calls (RPC) for various API functions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rpcPostTest() throws ApiException {
        RpcPostRequest rpcPostRequest = null;
        api.rpcPost(rpcPostRequest);
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET solr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void solrGetTest() throws ApiException {
        api.solrGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /subsystem_summary/:genome_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subsystemSummaryGenomeIdGetTest() throws ApiException {
        api.subsystemSummaryGenomeIdGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /summary_by_taxon/:taxon_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void summaryByTaxonTaxonIdGetTest() throws ApiException {
        api.summaryByTaxonTaxonIdGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for PATCH /:target_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void targetIdPatchTest() throws ApiException {
        api.targetIdPatch();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for POST /:target_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void targetIdPostTest() throws ApiException {
        api.targetIdPost();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET /taxon_category/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taxonCategoryGetTest() throws ApiException {
        api.taxonCategoryGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for GET type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void typeGetTest() throws ApiException {
        api.typeGet();
        // TODO: test validations
    }

    /**
     * Auto-generated summary for POST /:type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void typePostTest() throws ApiException {
        api.typePost();
        // TODO: test validations
    }

}
