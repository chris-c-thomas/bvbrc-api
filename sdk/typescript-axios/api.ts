/* tslint:disable */
/* eslint-disable */
/**
 * BV-BRC API
 * API documentation for BV-BRC
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DataPostRequest
 */
export interface DataPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DataPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof DataPostRequest
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface HpiSearchGet200Response
 */
export interface HpiSearchGet200Response {
    /**
     * 
     * @type {Array<HpiSearchGet200ResponseResultsInner>}
     * @memberof HpiSearchGet200Response
     */
    'results'?: Array<HpiSearchGet200ResponseResultsInner>;
}
/**
 * 
 * @export
 * @interface HpiSearchGet200ResponseResultsInner
 */
export interface HpiSearchGet200ResponseResultsInner {
    /**
     * 
     * @type {string}
     * @memberof HpiSearchGet200ResponseResultsInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof HpiSearchGet200ResponseResultsInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface QueryMultiPostRequest
 */
export interface QueryMultiPostRequest {
    /**
     * 
     * @type {Array<QueryMultiPostRequestQueriesInner>}
     * @memberof QueryMultiPostRequest
     */
    'queries'?: Array<QueryMultiPostRequestQueriesInner>;
}
/**
 * 
 * @export
 * @interface QueryMultiPostRequestQueriesInner
 */
export interface QueryMultiPostRequestQueriesInner {
    /**
     * 
     * @type {string}
     * @memberof QueryMultiPostRequestQueriesInner
     */
    'query'?: string;
    /**
     * 
     * @type {object}
     * @memberof QueryMultiPostRequestQueriesInner
     */
    'filters'?: object;
}
/**
 * 
 * @export
 * @interface RpcPostRequest
 */
export interface RpcPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RpcPostRequest
     */
    'method'?: string;
    /**
     * 
     * @type {object}
     * @memberof RpcPostRequest
     */
    'params'?: object;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-generated summary for GET accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET contentDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDirectoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contentDirectory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches content details based on a given ID.
         * @summary Retrieve content by ID
         * @param {string} id ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentIdGet', 'id', id)
            const localVarPath = `/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET content-type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentTypeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content-type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new dataset entry in the API.
         * @summary Add a new dataset entry
         * @param {DataPostRequest} dataPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataPost: async (dataPostRequest: DataPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataPostRequest' is not null or undefined
            assertParamExists('dataPost', 'dataPostRequest', dataPostRequest)
            const localVarPath = `/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dataPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all data types available in the API.
         * @summary Retrieve available data types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataTypeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /distinct/:collection/:field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distinctCollectionFieldGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/distinct/:collection/:field`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET distributeURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributeURLGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/distributeURL`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Serves API documentation in JSON format.
         * @summary Retrieve API documentation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/doc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows downloading files from the API using a file ID.
         * @summary Download a file
         * @param {string} fileId ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadGet: async (fileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('downloadGet', 'fileId', fileId)
            const localVarPath = `/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fileId !== undefined) {
                localVarQueryParameter['fileId'] = fileId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdIdListIdListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment/:id/id-list/:id_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list/ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdIdListIdListIdsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment/:id/id-list/:id_list/ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET feature_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featureTypeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feature_type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/2697049.107626/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genome2697049107626TrackListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/2697049.107626/trackList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/features/:seq_accession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdFeaturesSeqAccessionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/features/:seq_accession`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/names/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdNamesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/names/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/refseqs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdRefseqsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/refseqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/global
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsGlobalGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/stats/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/regionFeatureDensities/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsRegionFeatureDensitiesSequenceIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/stats/regionFeatureDensities/:sequence_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/region/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsRegionSequenceIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/stats/region/:sequence_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdTrackListGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/trackList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdTracksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genome/:id/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/*`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches data from the HPI search API using a search term.
         * @summary Search HPI data
         * @param {string} [term] Search term for querying HPI data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hpiSearchGet: async (term?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hpi/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET http_port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpPortGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/http_port`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the indexing process for the API database.
         * @summary Trigger data indexing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexerPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/indexer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET jbrowseAPIRoot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jbrowseAPIRootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/jbrowseAPIRoot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches genomic visualization data for JBrowse.
         * @summary Retrieve JBrowse data
         * @param {string} genomeId Genome ID for JBrowse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jbrowseGet: async (genomeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genomeId' is not null or undefined
            assertParamExists('jbrowseGet', 'genomeId', genomeId)
            const localVarPath = `/jbrowse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (genomeId !== undefined) {
                localVarQueryParameter['genomeId'] = genomeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns access permissions for a given genome.
         * @summary Check genome permissions
         * @param {string} genomeId ID of the genome
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsGenomeGet: async (genomeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genomeId' is not null or undefined
            assertParamExists('permissionsGenomeGet', 'genomeId', genomeId)
            const localVarPath = `/permissions/genome`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (genomeId !== undefined) {
                localVarQueryParameter['genomeId'] = genomeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for POST *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/*`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET publicURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicURLGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publicURL`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits multiple queries to the API and returns combined results.
         * @summary Execute multiple queries
         * @param {QueryMultiPostRequest} queryMultiPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryMultiPost: async (queryMultiPostRequest: QueryMultiPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryMultiPostRequest' is not null or undefined
            assertParamExists('queryMultiPost', 'queryMultiPostRequest', queryMultiPostRequest)
            const localVarPath = `/query/multi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryMultiPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET queueDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queueDirectoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/queueDirectory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/redis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns general information about the API.
         * @summary Auto-generated summary for GET /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for POST /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Handles remote procedure calls (RPC) for various API functions.
         * @summary Execute an RPC request
         * @param {RpcPostRequest} rpcPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rpcPost: async (rpcPostRequest: RpcPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rpcPostRequest' is not null or undefined
            assertParamExists('rpcPost', 'rpcPostRequest', rpcPostRequest)
            const localVarPath = `/rpc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rpcPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET solr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solrGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/solr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /subsystem_summary/:genome_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsystemSummaryGenomeIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subsystem_summary/:genome_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /summary_by_taxon/:taxon_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryByTaxonTaxonIdGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/summary_by_taxon/:taxon_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for PATCH /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        targetIdPatch: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:target_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        targetIdPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:target_id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET /taxon_category/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxonCategoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/taxon_category/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for GET type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typePost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Auto-generated summary for GET accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acceptGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acceptGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.acceptGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET contentDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDirectoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentDirectoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentDirectoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches content details based on a given ID.
         * @summary Retrieve content by ID
         * @param {string} id ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET content-type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentTypeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentTypeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new dataset entry in the API.
         * @summary Add a new dataset entry
         * @param {DataPostRequest} dataPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataPost(dataPostRequest: DataPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataPost(dataPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.dataPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of all data types available in the API.
         * @summary Retrieve available data types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataTypeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataTypeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.dataTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /distinct/:collection/:field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async distinctCollectionFieldGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.distinctCollectionFieldGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.distinctCollectionFieldGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET distributeURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async distributeURLGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.distributeURLGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.distributeURLGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Serves API documentation in JSON format.
         * @summary Retrieve API documentation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async docGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.docGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.docGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows downloading files from the API using a file ID.
         * @summary Download a file
         * @param {string} fileId ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadGet(fileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadGet(fileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.experimentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentIdGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.experimentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentIdIdListIdListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentIdIdListIdListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.experimentIdIdListIdListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list/ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentIdIdListIdListIdsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentIdIdListIdListIdsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.experimentIdIdListIdListIdsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET feature_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featureTypeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featureTypeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.featureTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/2697049.107626/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genome2697049107626TrackListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genome2697049107626TrackListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genome2697049107626TrackListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/features/:seq_accession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdFeaturesSeqAccessionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdFeaturesSeqAccessionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdFeaturesSeqAccessionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/names/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdNamesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdNamesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdNamesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/refseqs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdRefseqsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdRefseqsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdRefseqsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/global
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdStatsGlobalGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdStatsGlobalGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdStatsGlobalGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/regionFeatureDensities/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdStatsRegionFeatureDensitiesSequenceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/region/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdStatsRegionSequenceIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdStatsRegionSequenceIdGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdStatsRegionSequenceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdTrackListGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdTrackListGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdTrackListGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genomeIdTracksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genomeIdTracksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genomeIdTracksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches data from the HPI search API using a search term.
         * @summary Search HPI data
         * @param {string} [term] Search term for querying HPI data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hpiSearchGet(term?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HpiSearchGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hpiSearchGet(term, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.hpiSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET http_port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async httpPortGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.httpPortGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.httpPortGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async idGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.idGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.idGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Initiates the indexing process for the API database.
         * @summary Trigger data indexing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indexerPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indexerPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.indexerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET jbrowseAPIRoot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jbrowseAPIRootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jbrowseAPIRootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jbrowseAPIRootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches genomic visualization data for JBrowse.
         * @summary Retrieve JBrowse data
         * @param {string} genomeId Genome ID for JBrowse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jbrowseGet(genomeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jbrowseGet(genomeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.jbrowseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns access permissions for a given genome.
         * @summary Check genome permissions
         * @param {string} genomeId ID of the genome
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionsGenomeGet(genomeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionsGenomeGet(genomeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.permissionsGenomeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for POST *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET publicURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicURLGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicURLGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.publicURLGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submits multiple queries to the API and returns combined results.
         * @summary Execute multiple queries
         * @param {QueryMultiPostRequest} queryMultiPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryMultiPost(queryMultiPostRequest: QueryMultiPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryMultiPost(queryMultiPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryMultiPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET queueDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queueDirectoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queueDirectoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queueDirectoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redisGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redisGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.redisGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns general information about the API.
         * @summary Auto-generated summary for GET /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for POST /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Handles remote procedure calls (RPC) for various API functions.
         * @summary Execute an RPC request
         * @param {RpcPostRequest} rpcPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rpcPost(rpcPostRequest: RpcPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rpcPost(rpcPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rpcPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET solr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async solrGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.solrGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.solrGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /subsystem_summary/:genome_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subsystemSummaryGenomeIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subsystemSummaryGenomeIdGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.subsystemSummaryGenomeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /summary_by_taxon/:taxon_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summaryByTaxonTaxonIdGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summaryByTaxonTaxonIdGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.summaryByTaxonTaxonIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for PATCH /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async targetIdPatch(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.targetIdPatch(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.targetIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async targetIdPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.targetIdPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.targetIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET /taxon_category/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taxonCategoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taxonCategoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.taxonCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for GET type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.typeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typePost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typePost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.typePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Auto-generated summary for GET accept
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.acceptGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:collection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET contentDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDirectoryGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentDirectoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches content details based on a given ID.
         * @summary Retrieve content by ID
         * @param {string} id ID of the content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET content-type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentTypeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new dataset entry in the API.
         * @summary Add a new dataset entry
         * @param {DataPostRequest} dataPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataPost(dataPostRequest: DataPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.dataPost(dataPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all data types available in the API.
         * @summary Retrieve available data types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataTypeGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.dataTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /distinct/:collection/:field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distinctCollectionFieldGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.distinctCollectionFieldGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET distributeURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributeURLGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.distributeURLGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Serves API documentation in JSON format.
         * @summary Retrieve API documentation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        docGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.docGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Allows downloading files from the API using a file ID.
         * @summary Download a file
         * @param {string} fileId ID of the file to download
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadGet(fileId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.downloadGet(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.experimentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.experimentIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdIdListIdListGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.experimentIdIdListIdListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list/ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentIdIdListIdListIdsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.experimentIdIdListIdListIdsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET feature_type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featureTypeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.featureTypeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/2697049.107626/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genome2697049107626TrackListGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genome2697049107626TrackListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/features/:seq_accession
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdFeaturesSeqAccessionGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdFeaturesSeqAccessionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/names/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdNamesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdNamesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/refseqs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdRefseqsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdRefseqsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/global
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsGlobalGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdStatsGlobalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/regionFeatureDensities/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/stats/region/:sequence_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdStatsRegionSequenceIdGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdStatsRegionSequenceIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/trackList
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdTrackListGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdTrackListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /genome/:id/tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genomeIdTracksGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.genomeIdTracksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches data from the HPI search API using a search term.
         * @summary Search HPI data
         * @param {string} [term] Search term for querying HPI data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hpiSearchGet(term?: string, options?: RawAxiosRequestConfig): AxiosPromise<HpiSearchGet200Response> {
            return localVarFp.hpiSearchGet(term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET http_port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        httpPortGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.httpPortGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /:id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        idGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.idGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the indexing process for the API database.
         * @summary Trigger data indexing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indexerPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.indexerPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET jbrowseAPIRoot
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jbrowseAPIRootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jbrowseAPIRootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches genomic visualization data for JBrowse.
         * @summary Retrieve JBrowse data
         * @param {string} genomeId Genome ID for JBrowse
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jbrowseGet(genomeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.jbrowseGet(genomeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns access permissions for a given genome.
         * @summary Check genome permissions
         * @param {string} genomeId ID of the genome
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionsGenomeGet(genomeId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.permissionsGenomeGet(genomeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for POST *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.post(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET publicURL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicURLGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publicURLGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Submits multiple queries to the API and returns combined results.
         * @summary Execute multiple queries
         * @param {QueryMultiPostRequest} queryMultiPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryMultiPost(queryMultiPostRequest: QueryMultiPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryMultiPost(queryMultiPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET queueDirectory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queueDirectoryGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queueDirectoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET redis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redisGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.redisGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns general information about the API.
         * @summary Auto-generated summary for GET /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for POST /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Handles remote procedure calls (RPC) for various API functions.
         * @summary Execute an RPC request
         * @param {RpcPostRequest} rpcPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rpcPost(rpcPostRequest: RpcPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rpcPost(rpcPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET solr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        solrGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.solrGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /subsystem_summary/:genome_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subsystemSummaryGenomeIdGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.subsystemSummaryGenomeIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /summary_by_taxon/:taxon_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryByTaxonTaxonIdGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.summaryByTaxonTaxonIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for PATCH /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        targetIdPatch(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.targetIdPatch(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:target_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        targetIdPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.targetIdPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET /taxon_category/
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taxonCategoryGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.taxonCategoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for GET type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.typeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Auto-generated summary for POST /:type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typePost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.typePost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Auto-generated summary for GET accept
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public acceptGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).acceptGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /:collection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET contentDirectory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentDirectoryGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentDirectoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches content details based on a given ID.
     * @summary Retrieve content by ID
     * @param {string} id ID of the content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET content-type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentTypeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new dataset entry in the API.
     * @summary Add a new dataset entry
     * @param {DataPostRequest} dataPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dataPost(dataPostRequest: DataPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dataPost(dataPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all data types available in the API.
     * @summary Retrieve available data types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dataTypeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dataTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /distinct/:collection/:field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public distinctCollectionFieldGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).distinctCollectionFieldGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET distributeURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public distributeURLGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).distributeURLGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Serves API documentation in JSON format.
     * @summary Retrieve API documentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public docGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).docGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows downloading files from the API using a file ID.
     * @summary Download a file
     * @param {string} fileId ID of the file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadGet(fileId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadGet(fileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /experiment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public experimentGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).experimentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /experiment/:id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public experimentIdGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).experimentIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public experimentIdIdListIdListGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).experimentIdIdListIdListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /experiment/:id/id-list/:id_list/ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public experimentIdIdListIdListIdsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).experimentIdIdListIdListIdsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET feature_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public featureTypeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).featureTypeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/2697049.107626/trackList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genome2697049107626TrackListGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genome2697049107626TrackListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/features/:seq_accession
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdFeaturesSeqAccessionGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdFeaturesSeqAccessionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/names/
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdNamesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdNamesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/refseqs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdRefseqsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdRefseqsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/stats/global
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdStatsGlobalGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdStatsGlobalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/stats/regionFeatureDensities/:sequence_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdStatsRegionFeatureDensitiesSequenceIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/stats/region/:sequence_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdStatsRegionSequenceIdGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdStatsRegionSequenceIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/trackList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdTrackListGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdTrackListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /genome/:id/tracks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genomeIdTracksGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genomeIdTracksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public get(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches data from the HPI search API using a search term.
     * @summary Search HPI data
     * @param {string} [term] Search term for querying HPI data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public hpiSearchGet(term?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).hpiSearchGet(term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET http_port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public httpPortGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).httpPortGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /:id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public idGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).idGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates the indexing process for the API database.
     * @summary Trigger data indexing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public indexerPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).indexerPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET jbrowseAPIRoot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jbrowseAPIRootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jbrowseAPIRootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches genomic visualization data for JBrowse.
     * @summary Retrieve JBrowse data
     * @param {string} genomeId Genome ID for JBrowse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jbrowseGet(genomeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jbrowseGet(genomeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns access permissions for a given genome.
     * @summary Check genome permissions
     * @param {string} genomeId ID of the genome
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public permissionsGenomeGet(genomeId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).permissionsGenomeGet(genomeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for POST *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public post(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).post(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET publicURL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public publicURLGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).publicURLGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits multiple queries to the API and returns combined results.
     * @summary Execute multiple queries
     * @param {QueryMultiPostRequest} queryMultiPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryMultiPost(queryMultiPostRequest: QueryMultiPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryMultiPost(queryMultiPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET queueDirectory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queueDirectoryGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queueDirectoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET redis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public redisGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).redisGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns general information about the API.
     * @summary Auto-generated summary for GET /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for POST /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Handles remote procedure calls (RPC) for various API functions.
     * @summary Execute an RPC request
     * @param {RpcPostRequest} rpcPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rpcPost(rpcPostRequest: RpcPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rpcPost(rpcPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET solr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public solrGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).solrGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /subsystem_summary/:genome_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public subsystemSummaryGenomeIdGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).subsystemSummaryGenomeIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /summary_by_taxon/:taxon_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public summaryByTaxonTaxonIdGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).summaryByTaxonTaxonIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for PATCH /:target_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public targetIdPatch(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).targetIdPatch(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for POST /:target_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public targetIdPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).targetIdPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET /taxon_category/
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public taxonCategoryGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).taxonCategoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for GET type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public typeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).typeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Auto-generated summary for POST /:type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public typePost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).typePost(options).then((request) => request(this.axios, this.basePath));
    }
}



